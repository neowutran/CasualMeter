<controls:CasualMeterWindow x:Class="CasualMeter.ShellView"
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:tb="http://www.hardcodet.net/taskbar"
                            xmlns:controls="clr-namespace:CasualMeter.Common.UI.Controls;assembly=CasualMeter.Common"
                            xmlns:converters="clr-namespace:CasualMeter.Common.Converters;assembly=CasualMeter.Common"
                            xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                            xmlns:casualMeter="clr-namespace:CasualMeter"
                            xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                            xmlns:converters1="clr-namespace:Lunyx.Common.UI.Wpf.Converters;assembly=Lunyx.Common.UI.Wpf"
                            mc:Ignorable="d"
                            Title="Casual Meter"
                            Width = "{StaticResource Width}"
                            d:DataContext="{d:DesignInstance d:Type=casualMeter:ShellViewModel}"
                            IsVisibleChanged="ShellView_OnIsVisibleChanged">
    <Grid>
        <Grid.Resources>
            <Style TargetType="Border">
                <Setter Property="BorderBrush" Value="{StaticResource BrushWhite}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
            <ContextMenu x:Key="MainMenu">
                <MenuItem Header="Exit" Click="Exit_OnClick"></MenuItem>
            </ContextMenu>
            <converters:ApplicationTitleConverter x:Key="ApplicationTitleConverter"/>
            <converters:TimeSpanToTotalTimeConverter x:Key="TimeSpanToTotalTimeConverter"/>
            <converters:LongToTotalDamageConverter x:Key="LongToToTotalDamageConverter"/>
            <converters:SavedEncounterToStringConverter x:Key="SavedEncounterToStringConverter"/>
            <converters1:IsNullConverter x:Key="IsNullConverter"/>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <CollectionViewSource x:Key="PlayerStatsView"
                                  Source="{Binding DamageTracker.StatsByUser}"
                                  IsLiveSortingRequested="True">
                <CollectionViewSource.SortDescriptions>
                    <scm:SortDescription PropertyName="Dealt.Damage" Direction="Descending"/>
                    <scm:SortDescription PropertyName="Dealt.Heal" Direction="Descending"/>
                    <scm:SortDescription PropertyName="Name" Direction="Ascending"/>
                </CollectionViewSource.SortDescriptions>
            </CollectionViewSource>
            <CollectionViewSource x:Key="SavedEncountersView"
                                  Source="{Binding ArchivedDamageTrackers}"
                                  IsLiveSortingRequested="True">
                <CollectionViewSource.SortDescriptions>
                    <scm:SortDescription PropertyName="FirstAttack" Direction="Descending"/>
                </CollectionViewSource.SortDescriptions>
            </CollectionViewSource>
        </Grid.Resources>
        <tb:TaskbarIcon IconSource="Resources/CasualMeter.ico"
                        ToolTipText="Casual Meter"
                        ContextMenu="{StaticResource MainMenu}"
                        DoubleClickCommand="{Binding ToggleIsPinnedCommand}">
        </tb:TaskbarIcon>
        <StackPanel>
            <StackPanel.LayoutTransform>
                <ScaleTransform CenterX="0" CenterY="0" 
                            ScaleX="{Binding ElementName=UiScaleSlider, Path=Value}" 
                            ScaleY="{Binding ElementName=UiScaleSlider, Path=Value}"/>
            </StackPanel.LayoutTransform>
            <Border Width="{StaticResource Width}" Height="25">
                <Grid MouseDown="MoveControl" 
                      VerticalAlignment="Center"
                      Style="{StaticResource PanelStyle}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0"
                               Text="{Binding Server, Converter={StaticResource ApplicationTitleConverter}}"/>
                    <ToggleButton Grid.Column="1"
                                  Style="{StaticResource ToggleButtonStyle}"
                                  IsChecked="{Binding IsPinned}">
                        <Image Style="{StaticResource ButtonImageStyle}"
                               Source="{StaticResource PinButtonImage}"></Image>
                    </ToggleButton>
                    <ToggleButton Grid.Column="2" x:Name="SettingsButton"
                                  Style="{StaticResource ToggleButtonStyle}" 
                                  Unchecked="SettingsButton_OnUnchecked">
                        <Image Style="{StaticResource ButtonImageStyle}"
                               Source="{StaticResource SettingsButtonImage}"/>
                    </ToggleButton>
                    <casualMeter:CloseButton Grid.Column="3" Click="Exit_OnClick"/>
                </Grid>
            </Border>
            <Border Visibility="{Binding ElementName=SettingsButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Width="{StaticResource Width}">
                <StackPanel Orientation="Vertical"
                            Style="{StaticResource PanelStyle}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Size</TextBlock>
                        <Slider Grid.Column="1" x:Name="UiScaleSlider" 
                                Minimum="0.7" Maximum="1" Value="1" Width="200"
                                Margin="3"
                                HorizontalAlignment="Right"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Opacity</TextBlock>
                        <Slider Grid.Column="1" x:Name="OpacityScaleSlider" 
                                Minimum="0.2" Maximum="1" Value="1" Width="200"
                                Margin="3"
                                HorizontalAlignment="Right"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Use Global Hotkeys</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="UseGlobalHotKeysCheckBox"
                                  IsChecked="{Binding UseGlobalHotkeys}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Use Compact View</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="UseCompactViewCheckBox"
                                  IsChecked="{Binding UseCompactView}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Show Personal DPS</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="ShowPersonalDpsCheckBox"
                                  IsChecked="{Binding ShowPersonalDps}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Count Only Bosses</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="OnlyBossesCheckBox"
                                  IsChecked="{Binding OnlyBosses}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Ignore One-Shots (>10x HP)</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="IgnoreOneshotsCheckBox"
                                  IsChecked="{Binding IgnoreOneshots}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Autosave Encounters</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="AutosaveEncountersCheckBox"
                                  IsChecked="{Binding AutosaveEncounters}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0">Use Raw Sockets instead of WinPcap</TextBlock>
                        <CheckBox Grid.Column="1" x:Name="UseRawSocketsCheckBox"
                                  IsChecked="{Binding UseRawSockets}"
                                  HorizontalAlignment="Right"
                                  Margin="0,6,1,0"/>
                    </Grid>
                </StackPanel>
            </Border>
            <ItemsControl Background="Transparent" Width="{StaticResource Width}"
                          ItemsSource="{Binding Source={StaticResource PlayerStatsView}}">
                <ItemsControl.Resources>
                    <DataTemplate x:Key="FullViewTemplate">
                        <Border Style="{StaticResource BorderStyle}">
                            <controls:FullPlayerInfoControl PlayerInfo="{Binding}"
                                                            Style="{StaticResource PanelStyle}"
                                                            MouseDown="SkillInfo_OnMouseDown"/>
                        </Border>
                    </DataTemplate>
                    <DataTemplate x:Key="CompactViewTemplate">
                        <Border Style="{StaticResource BorderStyle}">
                            <controls:CompactPlayerInfoControl PlayerInfo="{Binding}"
                                                               Style="{StaticResource PanelStyle}"
                                                               MouseDown="SkillInfo_OnMouseDown"/>
                        </Border>
                    </DataTemplate>
                </ItemsControl.Resources>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding}">
                            <ContentControl.Style>
                                <Style TargetType="{x:Type ContentControl}">
                                    <Setter Property="ContentTemplate" Value="{StaticResource FullViewTemplate}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=casualMeter:ShellView}, Path=ShellViewModel.ShowCompactView}" Value="True">
                                            <Setter Property="ContentTemplate" Value="{StaticResource CompactViewTemplate}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            <Border Width="{StaticResource Width}" Height="25">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DamageTracker, Converter={StaticResource IsNullConverter}}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Setter Property="BorderBrush" Value="{StaticResource BrushWhite}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding DamageTracker, Converter={StaticResource IsNullConverter}}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid Style="{StaticResource GridStyle}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" 
                               HorizontalAlignment="Left"
                               Text="{Binding DamageTracker.Duration, Converter={StaticResource TimeSpanToTotalTimeConverter}}"/>
                    <TextBlock Grid.Column="1" 
                               HorizontalAlignment="Right"
                               Text="{Binding DamageTracker.TotalDealt.Damage, Converter={StaticResource LongToToTotalDamageConverter}}"/>
                    <ToggleButton Grid.Column="2" x:Name="EncountersButton" 
                                  Style="{StaticResource ToggleButtonStyle}">
                        <Image Source="{StaticResource DropdownButtonImage}"
                               Style="{StaticResource ButtonImageStyle}"/>
                    </ToggleButton>
                </Grid>
            </Border>
            <Border Width="{StaticResource Width}"
                    Style="{StaticResource BorderStyle}"
                    Visibility="{Binding ElementName=EncountersButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Grid Style="{StaticResource PanelStyle}">
                    <Grid.Resources>
                        <Style TargetType="{x:Type Button}" x:Key="EncounterButtonStyle" BasedOn="{StaticResource ButtonStyle}">
                            <Setter Property="Width" Value="{StaticResource Width}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="{StaticResource BrushWhite}"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ScrollViewer Grid.Row="0" MaxHeight="150" 
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Auto">
                        <ItemsControl Background="Transparent"
                                      ItemsSource="{Binding Source={StaticResource SavedEncountersView}}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Button Style="{StaticResource EncounterButtonStyle}" ToolTip="{Binding Path=Name}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <i:InvokeCommandAction Command="{Binding ShellViewModel.LoadEncounterCommand, RelativeSource={RelativeSource AncestorType={x:Type controls:CasualMeterWindow}}}"
                                                                       CommandParameter="{Binding}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <TextBlock Text="{Binding Converter={StaticResource SavedEncounterToStringConverter}}"
                                                   Style="{StaticResource {x:Type TextBlock}}"/>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                    <Button Style="{StaticResource EncounterButtonStyle}"
                            Grid.Row="1">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding ClearEncountersCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <TextBlock>Clear Saved Encounters</TextBlock>
                    </Button>
                </Grid>
            </Border>
        </StackPanel>
    </Grid>
</controls:CasualMeterWindow>
